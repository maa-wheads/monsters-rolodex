{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAGaA,G,YAAO,SAACC,GACjB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAACR,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCgCCG,E,kDAlCb,aACC,IAAD,8BACE,gBAQFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXb,SAAW,GACXU,YAAc,IALlB,E,gEAaoB,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,+BAGlC,IAAD,EAC0BC,KAAKN,MAA9Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACXU,EAAmBpB,EAASqB,QAAO,SAAArB,GAAQ,OAAIA,EAASH,KAAKyB,cAAcC,SAASb,EAAYY,kBACtG,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUJ,SAAYoB,W,GA7BZI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7891c6d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) =>{\r\n    return <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p> \r\n    </div>\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css'\r\n\r\n\r\nexport const CardList = (props) => {\r\n    return <div className='card-list'>        \r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n          ))}\r\n    </div>\r\n}","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n    className='search'\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange} />\r\n)","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport {CardList} from './components/card-list/card-list.component'\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\n\r\nclass App extends Component\r\n{\r\n  constructor()\r\n  {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters : [],\r\n      searchField : ''\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({searchField : e.target.value});\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({monsters : users}));\r\n  }\r\n\r\n  render(){\r\n    const {monsters, searchField} = this.state;\r\n    const filteredMonsters = monsters.filter(monsters => monsters.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return(\r\n      <div className=\"App\">\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox placeholder=\"Search Monster\" handleChange={this.handleChange}/>\r\n        <CardList monsters = {filteredMonsters}>\r\n        </CardList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}